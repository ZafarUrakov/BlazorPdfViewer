@page "/"
@rendermode InteractiveAuto
@inject IInteroplyService Interoply
@inject IJSRuntime JS
@using Interoply
@using Syncfusion.Blazor.SfPdfViewer

<style>
    .e-pv-loading-indicator,
    .e-pv-loading,
    .e-spinner-pane {
    display: none !important;
    }

    .e-pv-viewer-container,
    .e-pdfviewer,
    .e-pv-viewer {
    border: none !important;
    }

    .e-pv-viewer-container::before,
    .e-pv-viewer-container::after {
    display: none !important;
    }

    .e-pv-viewer-container {
    background: white !important;
    }
</style>

<SfPdfViewer2 @ref="pdfViewer"
DocumentPath="@Path"
Height="100vh"
Width="100%"
EnableTextMarkupAnnotation="true"
EnableZoomOptimization="true"
EnablePinchZoom="true">
<PdfViewerHighlightSettings >

</PdfViewerHighlightSettings>
    <PdfViewerEvents DocumentLoaded="OnDocumentLoaded" AnnotationAdded=@OnHightlith />
</SfPdfViewer2>

@code {
    private SfPdfViewer2 pdfViewer;
    private string Path { get; set; } =
        @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_100p.pdf";

    // Fix: Use double instead of int for scroll position
    private double? scrollTop = null;
    private bool shouldRestoreScroll = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Interoply.RegisterOnResizeListnerAsync(OnResize);
        }
    }

    private async Task OnHightlith(AnnotationAddEventArgs annotationAddEventArgs)
    {
        Console.WriteLine(annotationAddEventArgs.AnnotationProperties.DefaultText);
    }

    private async ValueTask OnResize(int width)
    {
        scrollTop = await JS.InvokeAsync<double>("pdfScrollHelper.getScrollTop");
        shouldRestoreScroll = true;

        int newZoom = width switch
        {
            <= 1200 => 400,
            <= 1300 => 200,
            <= 1400 => 150,
            <= 1600 => 125,
            <= 1800 => 100,
            _ => 100
        };

        var newPath = MapZoomToFile(newZoom);
        if (newPath != Path)
        {
            Path = newPath;
            StateHasChanged(); // Ensure UI updates
            await pdfViewer.LoadAsync(newPath);
        }
    }

    private async Task OnDocumentLoaded()
    {
        if (scrollTop.HasValue && shouldRestoreScroll)
        {
            await JS.InvokeVoidAsync("pdfScrollHelper.setScrollTop", scrollTop.Value);
            shouldRestoreScroll = false;
        }
    }

    private static string MapZoomToFile(int z) => z switch
    {
        >= 10 and < 25 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_10p.pdf",
        >= 25 and < 50 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_25p.pdf",
        >= 50 and < 75 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_50p.pdf",
        >= 75 and < 100 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_75p.pdf",
        >= 100 and < 125 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_100p.pdf",
        >= 125 and < 150 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_125p.pdf",
        >= 150 and < 200 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_150p.pdf",
        >= 200 and < 400 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_200p.pdf",
        >= 400 and <= 1000 => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_400p.pdf",
        _ => @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\Chapter_14_Zoom_100p.pdf"
    };
}