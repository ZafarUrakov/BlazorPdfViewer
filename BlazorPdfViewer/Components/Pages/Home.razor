@page "/"
@using System.Text
@using System.Text.RegularExpressions
@using EpubSharp
@inject IJSRuntime JSRuntime

<div class="epub-container">
    <div class="sidebar">
        <div class="controls">
            <button class="btn primary" @onclick="ToggleToc" disabled="@(!IsLoaded)">
                Table of Contents
            </button>

            <!-- Font Controls -->
            <div class="control-group">
                <label>Font Size:</label>
                <div class="font-controls">
                    <button class="btn small" @onclick="() => ChangeFontSize(-10)">A-</button>
                    <span class="font-display">@fontSize%</span>
                    <button class="btn small" @onclick="() => ChangeFontSize(10)">A+</button>
                    <button class="btn small" @onclick="() => fontSize = 100">Reset</button>
                </div>
            </div>

            <!-- Highlight Controls -->
            <div class="control-group">
                <label>Highlight Selected Text:</label>
                <div class="highlight-controls">
                    <button class="btn highlight yellow" @onclick=HighlightSelection title="Yellow"></button>
                </div>
                <button class="btn secondary small" @onclick="ClearHighlights">Clear All</button>
                <div class="highlight-info">
                    <small>@highlights.Count highlights</small>
                </div>
            </div>
        </div>

        @if (IsLoaded)
        {
            <!-- Book Info -->
            <div class="book-info">
                <h3>@book.Title</h3>
                <p>@string.Join(", ", book.Authors)</p>
                @if (coverImageData != null)
                {
                    <img src="@coverImageData" alt="Cover" class="cover" />
                }
            </div>

            <!-- Table of Contents -->
            @if (showToc)
            {
                <div class="toc">
                    <h4>Contents</h4>
                    <div class="toc-list">
                        @foreach (var (chapter, index) in chapters.Select((c, i) => (c, i)))
                        {
                            <button class="toc-item @(index == currentIndex ? "active" : "")"
                                    @onclick="() => LoadChapter(index)">
                                @chapter.Title
                            </button>
                        }
                    </div>
                </div>
            }

            <!-- Highlights Panel -->
            @if (highlights.Any())
            {
                <div class="highlights-panel">
                    <h4>Highlights</h4>
                    <div class="highlights-list">
                        @foreach (var highlight in highlights.OrderBy(h => h.ChapterIndex))
                        {
                            <div class="highlight-item @highlight.Color" @onclick="() => GoToHighlight(highlight)">
                                <div class="text">@GetPreviewText(highlight.Text)</div>
                                <div class="meta">
                                    <small>@chapters[highlight.ChapterIndex].Title</small>
                                    <button class="remove" @onclick="() => RemoveHighlight(highlight)" @onclick:stopPropagation="true">×</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>

    <div class="content-area">
        @if (IsLoaded)
        {
            <!-- Navigation -->
            <div class="navigation">
                <button class="btn secondary" @onclick="PreviousChapter" disabled="@(currentIndex <= 0)">← Previous</button>
                <span class="chapter-info">Chapter @(currentIndex + 1) of @chapters.Count: @chapters[currentIndex].Title</span>
                <button class="btn secondary" @onclick="NextChapter" disabled="@(currentIndex >= chapters.Count - 1)">Next →</button>
            </div>

            <!-- Content -->
            <div class="content" id="epub-content" style="font-size: @fontSize%;">
                @if (!string.IsNullOrEmpty(currentContent))
                {
                    @((MarkupString)currentContent)
                }
                else
                {
                    <p>Loading chapter content...</p>
                }
            </div>
        }
        else
        {
            <div class="placeholder">
                <h2>EPUB Reader</h2>
                <p>@(string.IsNullOrEmpty(EpubFilePath) ? "No EPUB file specified." : $"Loading: {Path.GetFileName(EpubFilePath)}")</p>
            </div>
        }
    </div>
</div>

<style>
    .epub-container {
        display: flex;
        height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .sidebar {
        width: 300px;
        background: #f8f9fa;
        border-right: 1px solid #dee2e6;
        padding: 1rem;
        overflow-y: auto;
    }

    .content-area {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        font-size: 0.875rem;
        transition: all 0.2s;
    }

        .btn.small {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

        .btn.primary {
            background: #007bff;
            color: white;
            width: 100%;
        }

        .btn.secondary {
            background: #6c757d;
            color: white;
        }

        .btn.primary:hover:not(:disabled) {
            background: #0056b3;
        }

        .btn.secondary:hover:not(:disabled) {
            background: #545b62;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .control-group {
        margin: 1rem 0;
        padding: 0.75rem;
        background: white;
        border-radius: 0.25rem;
        border: 1px solid #dee2e6;
    }

        .control-group label {
            display: block;
            font-weight: bold;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

    .font-controls {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .font-display {
        font-weight: bold;
        color: #007bff;
        min-width: 3rem;
        text-align: center;
    }

    .highlight-controls {
        display: flex;
        gap: 0.25rem;
        margin-bottom: 0.5rem;
    }

    .btn.highlight {
        width: 30px;
        height: 30px;
        border: 2px solid #ddd;
        border-radius: 0.25rem;
    }

        .btn.highlight.yellow {
            background: #ffeb3b;
        }

        .btn.highlight.green {
            background: #4caf50;
        }

        .btn.highlight.blue {
            background: #2196f3;
        }

        .btn.highlight.pink {
            background: #e91e63;
        }

        .btn.highlight:hover {
            opacity: 0.8;
            transform: scale(1.05);
        }

    .highlight-info {
        margin-top: 0.5rem;
    }

        .highlight-info small {
            color: #666;
        }

    .book-info h3 {
        margin: 0 0 0.5rem 0;
    }

    .book-info p {
        margin: 0.25rem 0;
        color: #666;
        font-size: 0.875rem;
    }

    .cover {
        max-width: 100%;
        height: auto;
        margin: 1rem 0;
        border-radius: 0.25rem;
    }

    .toc {
        margin-top: 1rem;
    }

        .toc h4 {
            margin: 0 0 0.5rem 0;
        }

    .toc-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .toc-item {
        display: block;
        width: 100%;
        padding: 0.5rem;
        margin-bottom: 0.25rem;
        background: none;
        border: none;
        text-align: left;
        cursor: pointer;
        border-radius: 0.25rem;
        color: #007bff;
        font-size: 0.875rem;
    }

        .toc-item:hover {
            background: #e9ecef;
        }

        .toc-item.active {
            background: #007bff;
            color: white;
        }

    .highlights-panel {
        margin-top: 1rem;
        padding: 0.75rem;
        background: white;
        border-radius: 0.25rem;
        border: 1px solid #dee2e6;
    }

        .highlights-panel h4 {
            margin: 0 0 0.5rem 0;
        }

    .highlights-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .highlight-item {
        padding: 0.5rem;
        margin-bottom: 0.5rem;
        border-radius: 0.25rem;
        cursor: pointer;
        border-left: 4px solid;
        background: #f8f9fa;
        transition: background 0.2s;
    }

        .highlight-item:hover {
            background: #e9ecef;
        }

        .highlight-item.yellow {
            border-left-color: #ffeb3b;
        }

        .highlight-item.green {
            border-left-color: #4caf50;
        }

        .highlight-item.blue {
            border-left-color: #2196f3;
        }

        .highlight-item.pink {
            border-left-color: #e91e63;
        }

        .highlight-item .text {
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
            line-height: 1.4;
        }

        .highlight-item .meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .highlight-item .meta small {
                color: #666;
                font-size: 0.75rem;
            }

    .remove {
        background: none;
        border: none;
        color: #dc3545;
        font-size: 1.2rem;
        cursor: pointer;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .remove:hover {
            background: #dc3545;
            color: white;
        }

    .navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: white;
        border-bottom: 1px solid #dee2e6;
    }

    .chapter-info {
        font-size: 0.875rem;
        color: #666;
        text-align: center;
        flex: 1;
        margin: 0 1rem;
    }

    .content {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
        background: white;
        line-height: 1.6;
        user-select: text;
    }

        .content .highlight {
            padding: 2px 0;
            border-radius: 3px;
            cursor: pointer;
        }

            .content .highlight.yellow {
                background: rgba(255, 235, 59, 0.4);
            }

            .content .highlight.green {
                background: rgba(76, 175, 80, 0.4);
            }

            .content .highlight.blue {
                background: rgba(33, 150, 243, 0.4);
            }

            .content .highlight.pink {
                background: rgba(233, 30, 99, 0.4);
            }

    .placeholder {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100%;
        color: #6c757d;
    }

    .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 {
        color: #333;
        margin: 1.5rem 0 1rem 0;
    }

    .content p {
        margin: 1rem 0;
        color: #333;
        text-align: justify;
    }

    .content img {
        max-width: 100%;
        height: auto;
        margin: 1rem auto;
        display: block;
    }

    @@media (max-width: 768px) {
        .epub-container

    {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        max-height: 300px;
    }

    .navigation {
        flex-direction: column;
        gap: 0.5rem;
    }

    .chapter-info {
        margin: 0;
    }

    }
</style>

@code {
    [Parameter] public string EpubFilePath { get; set; } = @"C:\Users\133\source\repos\BlazorPdfViewer\BlazorPdfViewer\wwwroot\ZoomLevels\wodehouse-a-prefects-uncle.epub";

    private EpubBook? book;
    private bool IsLoaded => book != null;
    private string? coverImageData;
    private bool showToc = false;
    private int currentIndex = 0;
    private string currentContent = string.Empty;
    private List<EpubChapter> chapters = new();
    private Dictionary<string, string> imageCache = new();
    private Dictionary<string, string> htmlCache = new();
    private int fontSize = 100;
    private List<Highlight> highlights = new();
    private int highlightIdCounter = 0;
    private string? pendingSelection;

    public class Highlight
    {
        public int Id { get; set; }
        public string Text { get; set; } = string.Empty;
        public string Color { get; set; } = "yellow";
        public int ChapterIndex { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(EpubFilePath))
            {
                await LoadEpub();
            }
            await JSRuntime.InvokeVoidAsync("initializeSelection", DotNetObjectReference.Create(this));
        }
    }

    private async Task LoadEpub()
    {
        try
        {
            if (!File.Exists(EpubFilePath)) return;

            book = EpubReader.Read(EpubFilePath);

            // Cache images
            foreach (var image in book.Resources.Images)
            {
                var base64 = Convert.ToBase64String(image.Content);
                var mimeType = GetMimeType(image.FileName);
                imageCache[Path.GetFileName(image.FileName)] = $"data:{mimeType};base64,{base64}";
            }

            // Cache HTML
            foreach (var html in book.Resources.Html)
            {
                htmlCache[html.FileName] = html.TextContent;
                htmlCache[Path.GetFileName(html.FileName)] = html.TextContent;
            }

            // Load cover
            if (book.CoverImage != null)
            {
                coverImageData = $"data:image/jpeg;base64,{Convert.ToBase64String(book.CoverImage)}";
            }

            // Flatten chapters
            FlattenChapters(book.TableOfContents);

            if (chapters.Any())
            {
                await LoadChapter(0);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading EPUB: {ex.Message}");
        }
    }

    private void FlattenChapters(ICollection<EpubChapter> chapterList)
    {
        foreach (var chapter in chapterList)
        {
            chapters.Add(chapter);
            if (chapter.SubChapters.Any())
            {
                FlattenChapters(chapter.SubChapters);
            }
        }
    }

    private async Task LoadChapter(int index)
    {
        if (index < 0 || index >= chapters.Count) return;

        currentIndex = index;
        var chapter = chapters[index];

        string content = await GetChapterContent(chapter);
        content = ProcessContent(content);
        content = ApplyHighlights(content, index);

        currentContent = content;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("scrollToTop");
    }

    private async Task<string> GetChapterContent(EpubChapter chapter)
    {
        if (string.IsNullOrEmpty(chapter.FileName)) return string.Empty;

        var keys = new[] {
            chapter.FileName,
            Path.GetFileName(chapter.FileName),
            chapter.FileName.Replace("../", "").Replace("./", "")
        };

        foreach (var key in keys)
        {
            if (htmlCache.ContainsKey(key))
            {
                return htmlCache[key];
            }
        }

        return string.Empty;
    }

    private string ProcessContent(string content)
    {
        if (string.IsNullOrEmpty(content)) return string.Empty;

        // Clean HTML
        content = Regex.Replace(content, @"<!DOCTYPE[^>]*>|</?html[^>]*>|</?head[^>]*>|</?body[^>]*>", "", RegexOptions.IgnoreCase);

        // Replace images
        content = Regex.Replace(content, @"<img[^>]+src\s*=\s*[""']([^""']+)[""'][^>]*>", match =>
        {
            var src = match.Groups[1].Value;
            var imageName = Path.GetFileName(src);
            return imageCache.ContainsKey(imageName) ? match.Value.Replace(src, imageCache[imageName]) : match.Value;
        }, RegexOptions.IgnoreCase);

        // Remove CSS links
        content = Regex.Replace(content, @"<link[^>]+>", "", RegexOptions.IgnoreCase);

        return content.Trim();
    }

    private string ApplyHighlights(string content, int chapterIndex)
    {
        var chapterHighlights = highlights.Where(h => h.ChapterIndex == chapterIndex).OrderByDescending(h => h.Text.Length);

        foreach (var highlight in chapterHighlights)
        {
            var pattern = Regex.Escape(highlight.Text);
            var replacement = $"<span class=\"highlight {highlight.Color}\" data-highlight-id=\"{highlight.Id}\">{highlight.Text}</span>";
            content = Regex.Replace(content, pattern, replacement, RegexOptions.IgnoreCase);
        }

        return content;
    }

    [JSInvokable]
    public void OnTextSelected(string selectedText)
    {
        pendingSelection = selectedText?.Trim();
    }

    private async Task HighlightSelection()
    {
        if (string.IsNullOrWhiteSpace(pendingSelection) || pendingSelection.Length < 3) return;

        var highlight = new Highlight
            {
                Id = ++highlightIdCounter,
                Text = pendingSelection,
                Color = "green",
                ChapterIndex = currentIndex
            };

        highlights.Add(highlight);
        pendingSelection = null;

        await LoadChapter(currentIndex); // Refresh to show highlight
    }

    private async Task RemoveHighlight(Highlight highlight)
    {
        highlights.Remove(highlight);
        await LoadChapter(currentIndex);
    }

    private async Task ClearHighlights()
    {
        highlights.Clear();
        await LoadChapter(currentIndex);
    }

    private async Task GoToHighlight(Highlight highlight)
    {
        if (highlight.ChapterIndex != currentIndex)
        {
            await LoadChapter(highlight.ChapterIndex);
        }
        await JSRuntime.InvokeVoidAsync("scrollToHighlight", highlight.Id);
    }

    private void ChangeFontSize(int delta)
    {
        fontSize = Math.Clamp(fontSize + delta, 50, 200);
    }

    private void ToggleToc() => showToc = !showToc;
    private async Task PreviousChapter() => await LoadChapter(currentIndex - 1);
    private async Task NextChapter() => await LoadChapter(currentIndex + 1);

    private string GetPreviewText(string text) => text.Length > 80 ? text.Substring(0, 80) + "..." : text;

    private string GetMimeType(string fileName)
    {
        var ext = Path.GetExtension(fileName).ToLowerInvariant();
        return ext switch
        {
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".svg" => "image/svg+xml",
            _ => "image/jpeg"
        };
    }
}

<script>
    window.initializeSelection = (dotNetHelper) => {
        document.addEventListener('mouseup', function(e) {
            const selection = window.getSelection();
            if (selection.rangeCount > 0 && !selection.isCollapsed) {
                const selectedText = selection.toString().trim();
                if (selectedText.length > 2) {
                    dotNetHelper.invokeMethodAsync('OnTextSelected', selectedText);
                }
            }
        });
    };

    window.scrollToTop = () => {
        const content = document.getElementById('epub-content');
        if (content) content.scrollTop = 0;
    };

    window.scrollToHighlight = (highlightId) => {
        const element = document.querySelector(`[data-highlight-id="${highlightId}"]`);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
            element.style.boxShadow = '0 0 10px rgba(255, 0, 0, 0.5)';
            setTimeout(() => element.style.boxShadow = '', 2000);
        }
    };
</script>